@model Latest_Staff_Portal.ViewModel.PurchaseRequisitions

@{
    Layout = "~/Views/Shared/Sitemaster.cshtml";
}

<div class="page-header">
    <div class="row">
        <div class="col-sm-12">
            <ul class="breadcrumb">
                <li class="breadcrumb-item">
                    <a href="/Purchase/PurchaseRequisitionListPartialView">Purchase Requisition List</a>
                </li>
                <li class="breadcrumb-item active">Purchase Requisition Document View (@Model.No)</li>
            </ul>
        </div>
    </div>
</div>
<hr />
<br />
<div class="card">
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Document Type", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Document_Type, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.Document_Type, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("No", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.No, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.No, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("PRN Type", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.PRN_Type, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.PRN_Type, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Document Date", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Document_Date, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.Document_Date, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Location Code", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Location_Code, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.Location_Code, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Requisition Product Group", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Requisition_Product_Group, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.Requisition_Product_Group, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Requester ID", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Requester_ID, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.Requester_ID, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Request By No", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Request_By_No, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.Request_By_No, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Request By Name", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Request_By_Name, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.Request_By_Name, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Shortcut Dimension 1 Code", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Shortcut_Dimension_1_Code, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.Shortcut_Dimension_1_Code, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Department Name", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Department_Name, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.Department_Name, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Shortcut Dimension 2 Code", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Shortcut_Dimension_2_Code, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.Shortcut_Dimension_2_Code, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Project Name", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Project_Name, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.Project_Name, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Procurement Plan ID", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Procurement_Plan_ID, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.Procurement_Plan_ID, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Purchaser Code", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Purchaser_Code, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.Purchaser_Code, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Assigned Officer", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Assigned_Officer, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.Assigned_Officer, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Job", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Job, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.Job, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Job Task No", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Job_Task_No, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.Job_Task_No, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("PP Planning Category", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.PP_Planning_Category, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.PP_Planning_Category, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Description", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("PP Total Budget", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.PP_Total_Budget, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.PP_Total_Budget, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("PP Total Actual Costs", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.PP_Total_Actual_Costs, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.PP_Total_Actual_Costs, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("PP Solicitation Type", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.PP_Solicitation_Type, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.PP_Solicitation_Type, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Other Procurement Methods", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Other_Procurement_Methods, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.Other_Procurement_Methods, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("PP Bid Selection Method", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.PP_Bid_Selection_Method, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.PP_Bid_Selection_Method, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("PP Procurement Method", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.PP_Procurement_Method, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.PP_Procurement_Method, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("PP Invitation Notice Type", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.PP_Invitation_Notice_Type, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.PP_Invitation_Notice_Type, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("PP Preference Reservation Code", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.PP_Preference_Reservation_Code, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.PP_Preference_Reservation_Code, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("PRN Conversion Procedure", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.PRN_Conversion_Procedure, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.PRN_Conversion_Procedure, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Ordered PRN", htmlAttributes: new { @class = "control-label col-md-2" })

                    <div class="checkbox">
                        @Html.EditorFor(model => model.Ordered_PRN)
                        @Html.ValidationMessageFor(model => model.Ordered_PRN, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Linked IFS No", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Linked_IFS_No, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.Linked_IFS_No, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Linked LPO No", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Linked_LPO_No, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.Linked_LPO_No, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Consolidate PRN", htmlAttributes: new { @class = "control-label col-md-2" })

                    <div class="checkbox">
                        @Html.EditorFor(model => model.Consolidate_PRN)
                        @Html.ValidationMessageFor(model => model.Consolidate_PRN, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Consolidate to IFS No", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Consolidate_to_IFS_No, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.Consolidate_to_IFS_No, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Status", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" } })
                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>


        <hr style="border:1px solid black" />
        <b>Purchase Requisition Lines</b>
        <hr />
        <div id="divPRLines"></div>
        <hr style="border:1px solid black" />
    </div>
</div>


@*//////////////////////Modal////////////////////////////*@
<div class="modal" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content bg-white">
            <div class="modal-header">
                <h4 class="modal-title">New Purchase Requisition Line</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalBody">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger waves-effect " data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


@*//////////////////////Modal View Doc////////////////////////////*@
<div class="modal fade" id="myModalAttachment" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content bg-white">
            <div class="modal-header">
                <h4 class="modal-title">Attachment</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalAttachmentBody" style="width:100%;height:450px">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger waves-effect " data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script src="~/assets/js/ShowProgression.js"></script>
<script src="~/assets/js/pdfobject.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        LoadPurchaseRequisitionLines(`@Model.No`,`@Model.Status`);
        var status = `@Model.Status`;
        var Successmsg = '@Request.RequestContext.HttpContext.Session["SuccessMsg"]';
        if (Successmsg != "") {
            Swal.fire('Success', Successmsg, 'success',true);
            $.ajax({
                type: "POST",
                url: "/Common/NullibySessions"
            });
        }


    });
    var LoadPurchaseRequisitionLines = function (Document_No, Status) {

        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ Document_No: Document_No, Status: Status }),
            url: "/Purchase/PurchaseRequisitionLinesPartialView",
            success: function (data) {
                $("#divPRLines").html(data);
                HideProgress();
            },
            error: function () {
                HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };

    var AddPurchaseRequisitionLine = function () {
        var Document_No = '@Model.No';

        ShowProgress();

        $.ajax({
            async: true,
            type: "GET",
            dataType: "html",
            url: '/Purchase/NewPurchaseRequisitionLine',
            data: {
                Document_No, Document_No
            },
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err.responseText, 'warning');
            }
        });
    }

    function SubmitPurchaseRequisitionLine() {
        var isValid = true;

        // Collect data from the form

        var formData = {
            Document_No:$("#Document_No").val(),
            Type: $("#Type").val(),
            Procurement_Plan_ID: $("#Procurement_Plan_ID").val(),
            Document_Type: $("#Document_Type").val(),
            Budget: $("#Budget").val(),
            Budget_Line: $("#Budget_Line").val(),
            Procurement_Plan_Entry_No: $("#Procurement_Plan_Entry_No").val(),
            Item_Description: $("#Item_Description").val(),
            PP_Preference_Reservation_Code: $("#PP_Preference_Reservation_Code").val(),
            Item_Category_Code: $("#Item_Category_Code").val(),
            No: $("#item").val(),
            Unit_of_Measure_Code: $("#Unit_of_Measure_Code").val(),
            Quantity: $("#Quantity").val(),
            Direct_Unit_Cost: $("#Direct_Unit_Cost").val(),
            Location_Code: $("#Location_Code").val()
        };

        console.log(formData)





        // Validation checks
        if (!formData.Type) {
            Swal.fire('Warning', 'Select Type.', 'warning');
            isValid = false;
        }

        if (!formData.Procurement_Plan_ID) {
            Swal.fire('Warning', 'Select Procurement Plan ID.', 'warning');
            isValid = false;
        }

        if (!formData.Document_Type) {
            Swal.fire('Warning', 'Select Document Type.', 'warning');
            isValid = false;
        }

        if (!formData.Budget) {
            Swal.fire('Warning', 'Select Budget.', 'warning');
            isValid = false;
        }

        if (!formData.Budget_Line) {
            Swal.fire('Warning', 'Select Budget Line.', 'warning');
            isValid = false;
        }

        if (!formData.Procurement_Plan_Entry_No) {
            Swal.fire('Warning', 'Select  Procurement Plan Entry Number.', 'warning');
            isValid = false;
        }

        if (!formData.Item_Description) {
            Swal.fire('Warning', 'Enter Item Description.', 'warning');
            isValid = false;
        }

     /*   if (!formData.PP_Preference_Reservation_Code) {
            Swal.fire('Warning', 'Select Preference Reservation.', 'warning');
            isValid = false;
        }*/

        if (!formData.Item_Category_Code) {
            Swal.fire('Warning', 'Select Item Category', 'warning');
            isValid = false;
        }

        if (!formData.No) {
            Swal.fire('Warning', 'Select Item.', 'warning');
            isValid = false;
        }

        if (!formData.Unit_of_Measure_Code) {
            Swal.fire('Warning', 'Select Unit of Measure.', 'warning');
            isValid = false;
        }

        if (!formData.Quantity || formData.Quantity <= 0) {
            Swal.fire('Warning', 'Enter a valid Quantity.', 'warning');
            isValid = false;
        }

        if (!formData.Direct_Unit_Cost || formData.Direct_Unit_Cost <= 0) {
            Swal.fire('Warning', 'Enter a valid Direct Unit Cost.', 'warning');
            isValid = false;
        }

        if (!formData.Location_Code) {
            Swal.fire('Warning', 'Select Location', 'warning');
            isValid = false;
        }



        // Exit if validation fails
        if (!isValid) {
            return;
        }

        // Prepare data object
        var newPurchaseRequisitionLine = formData;

        // Show progress indicator
        ShowProgress();

        // Send data via AJAX
        $.ajax({
            type: "POST",
            url: "/Purchase/SubmitPurchaserequisitionLine", // Change this to your actual endpoint
            data: JSON.stringify(newPurchaseRequisitionLine),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                HideProgress();
                    if (data.success) {
                        console.log(data.succes)
                    /*ViewDoc(data.message);*/
                        Swal.fire('Success', 'Purchase Requisition line submitted successfully.', 'success');
                        window.location.reload();
                } else {
                    Swal.fire('Warning', data.message, 'warning');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Error', 'An error occurred while submitting the request.', 'error');
            }
        });
    }

    var GeneratePurchaseRequisitionReport = function (docNo) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ documentNumber: docNo }),
            contentType: "application/json; charset=utf-8",
            processData: false,
            url: '/ExpenseRequisition/GenerateExpenseRequisitionReport',
            success: function (data) {
                if (data.success) {
                    $('iframe').attr('src', "data:application/pdf;base64," + data.message);
                    $("#myModalUnits").modal("show");
                    HideProgress();
                } else {
                    Swal.fire('Error', data.message, 'error');
                    HideProgress();
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }

</script>

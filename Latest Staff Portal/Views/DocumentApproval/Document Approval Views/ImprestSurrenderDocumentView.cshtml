@using Latest_Staff_Portal.ViewModel
@model Latest_Staff_Portal.ViewModel.ImprestSurrender
<style>
    thead {
        background-color: black;
        color: white;
    }

    hr {
        margin: 4px;
    }

    .BtnPadding {
        padding: 7px;
        font-size: 12px;
    }
</style>
<div class="card">
    <div class="card-body">
        <hr />
        <div class="text-center mt-5"><h4>Imprest Surrender (@Model.No)</h4></div><br />
        <div class="row">
            <div class="col-md-6">
                <b>Document No</b>
                @Html.TextBoxFor(m => m.No, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Date</b>
                @Html.TextBoxFor(m => m.Date, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd", autocomplete = "off" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <b>Account Type</b>
                @Html.TextBoxFor(m => m.AccountType, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Account No</b>
                @Html.TextBoxFor(m => m.AccountNo, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <b>Account Name</b>
                @Html.TextBoxFor(m => m.AccountName, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Payee</b>
                @Html.TextBoxFor(m => m.Payee, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <b>Geographical Location Code</b>
                @Html.TextBoxFor(m => m.ShortcutDimension1Code, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Geographical Location</b>
                @Html.TextBoxFor(m => m.DepartmentName, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <b>Admin Unit Code</b>
                    @Html.TextBoxFor(m => m.ShortcutDimension2Code, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">

                    <b>Admin Unit</b>
                    @Html.TextBoxFor(m => m.ProjectName, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <b>Imprest Amount</b>
                @Html.TextBoxFor(m => m.ImprestAmount, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Imprest Issue Doc No</b>
                @Html.TextBoxFor(m => m.ImprestIssueDocNo, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
        </div>
        <div class="row">

            <div class="col-md-6">
                <b>Actual Amount Spent</b>
                @Html.TextBoxFor(m => m.ActualAmountSpent, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Remaining Amount</b>
                @Html.TextBoxFor(m => m.RemainingAmount, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <b>Posting Date</b>
                @Html.TextBoxFor(m => m.PostingDate, new { @class = "form-control", @id = "postingDate" })
            </div>
            <div class="col-md-6">
                <b>Strategic Plan</b>
                @Html.TextBoxFor(m => m.StrategicPlan, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Reporting Year Code</b>
                @Html.TextBoxFor(m => m.ReportingYearCode, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Workplan Code</b>
                @Html.TextBoxFor(m => m.WorkplanCode, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Activity Code</b>
                @Html.TextBoxFor(m => m.ActivityCode, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Expenditure Requisition Code</b>
                @Html.TextBoxFor(m => m.ExpenditureRequisitionCode, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Created By</b>
                @Html.TextBoxFor(m => m.CreatedBy, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Status</b>
                @Html.TextBoxFor(m => m.Status, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
        </div>
        <hr />
        <div id="DivImpLines">
            <hr style="border:1px solid black" />
            <b>Imprest Surrender Lines</b>
            <hr />
            <div id="divSurrenderLines"></div>
        </div>
        <hr style="border:1px solid black" />
        <div class="row">
            <div class="col-md-12">
                <b>Attachments</b>
                <div id="divAttachDocs"></div>
            </div>
        </div>
        <hr style="border:1px solid black" />

        <hr />
        @{
            if (Model.Status == "Open")
            {
                <div align="center">
                    <input type="button" class="btn btn-primary waves-effect waves-light" value="Send (@Model.No) For Approval" onclick="SendDocForApproval('@Model.No');" />
                </div>
            }
        }
    </div>
</div>

@*//////////////////////Modal////////////////////////////*@
<div id="myModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title mt-0" id="myModalLabel"><label id="labelF"></label></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalBody">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary waves-effect" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
@*//////////Modal///////////////*@
<div id="myModalUnits" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="myModalCheck">Imprest Surrender Form</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <iframe src="" width="100%" height="600px"></iframe>
            </div>
        </div>
    </div>
</div>
@*//////////////////////Modal View Doc////////////////////////////*@
<div class="modal fade" id="myModalAttachment" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content bg-white">
            <div class="modal-header">
                <h4 class="modal-title">Attachment</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalAttachmentBody" style="width:100%;height:450px">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger waves-effect " data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<script src="~/assets/js/ShowProgression.js"></script>
<script src="~/assets/js/pdfobject.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        LoadImprestSurrenderLines(`@Model.No`, `@Model.Status`);
        GetDocumentAttachments();
        $('#postingDate').datepicker({
            changeMonth: true,
            changeYear: true,
            autoclose: true,
            yearRange: '-1:+2',
            showOtherMonths: true,
            dateFormat: 'dd/mm/yy'
        });
        $("#postingDate").focus(function () {
            $("#ui-datepicker-div").position({
                my: "left top",
                at: "left bottom",
                of: $(this)
            });
        });

    });
    var LoadImprestSurrenderLines = function (DocNo, Status) {
        var applyToDocNo = '@Model.ImprestIssueDocNo'
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: DocNo, Status: Status, applyToDocumentNumber: applyToDocNo }),
			url: "/ImprestSurrender/ImprestSurrenderLines",
            success: function (data) {
                HideProgress();
                $("#divSurrenderLines").html(data);
                GetDocumentAttachments();
            },
            error: function () {
                HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };
        var GetDocumentAttachments = function () {
	var DocNo = `@Model.No`;
    var status = '@Model.Status';
	$.ajax({
		async: true,
		type: "POST",
		datatype: "json",
		contentType: "application/json; charset = utf-8",
		processData: false,
        data: JSON.stringify({ DocNo: DocNo, documentStatus: status }),
        url: "/Common/EdmsDocumentAttachmentList",
		success: function (data) {
			$("#divAttachDocs").html(data);
		},
		error: function () {
			Swal.fire("There is some problem to process your request. Please try after some time");
		}
	});
};
	var AddAttachment = function () {
		$("#labelF").text("File Upload");
		ShowProgress();
		$.ajax({
			async: true,
			type: "GET",
			datatype: "html",
            url: '/Common/FileUploadForm',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
    var ViewAttachment = function (moduleCheck, docNo, docId) {
        $.ajaxSetup({ cache: false });
        ShowProgress();
        var viewer = $("#modalAttachmentBody");
        viewer.empty();

        $.ajax({
            url: '/Common/GetEdmsDocuments',
            type: "GET",
            datatype: "json",
            cache: false,
            contentType: "application/json; charset=utf-8",
            data: {
                module: moduleCheck,
                documentNo: docNo,
                documentType: "Expenditure Requisition",
                documentId: docId
            },
            success: function (data) {
                if (data.success) {
                    if (data.base64) {
                        var mimeType = data.mimeType || 'application/pdf';

                        if (mimeType.startsWith('application/pdf')) {

                            var byteCharacters = atob(data.base64);
                            var byteNumbers = new Array(byteCharacters.length);
                            for (var i = 0; i < byteCharacters.length; i++) {
                                byteNumbers[i] = byteCharacters.charCodeAt(i);
                            }
                            var byteArray = new Uint8Array(byteNumbers);
                            var blob = new Blob([byteArray], { type: mimeType });
                            var blobUrl = URL.createObjectURL(blob);


                            viewer.html('<iframe src="' + blobUrl + '" style="width:100%; height:500px;" frameborder="0"></iframe>');
                        } else if (mimeType.startsWith('image/')) {

                            viewer.html('<img src="data:' + mimeType + ';base64,' + data.base64 + '" style="width:100%;"/>');
                        } else {

                            var blob = b64toBlob(data.base64, mimeType);
                            var url = window.URL.createObjectURL(blob);
                            window.open(url, '_blank');
                        }
                        $("#myModalAttachment").modal("show");
                    } else {

                        window.location = '/Common/AttachmentDownload?fileName=' + data.message;
                        Swal.fire('Success', 'Document Downloaded successfully', 'success');
                    }
                } else {
                    Swal.fire('Warning', data.message, 'warning');
                }
                HideProgress();
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Error', err.responseText || 'An error occurred', 'error');
            }
        });
    };
</script>
@model Latest_Staff_Portal.ViewModel.PettyCashVouchers

@{
    ViewBag.Title = "PettyCashVouchersDocumentView";
    Layout = "~/Views/Shared/Sitemaster.cshtml";
}


<style>
    thead {
        background-color: black;
        color: white;
    }

    hr {
        margin: 4px;
    }

    .BtnPadding {
        padding: 7px;
        font-size: 12px;
    }
</style>
<div class="page-header">
    <div class="row">
        <div class="col-sm-12">
            <ul class="breadcrumb">
                <li class="breadcrumb-item">
                    <a href="#" onclick="PettyCashVouchersListLink();">Petty Cash Vouchers List</a>
                </li>
                <li class="breadcrumb-item active">Petty Cash Voucher Document (@Model.No)</li>
            </ul>
        </div>
    </div>
</div>
<hr />
<br />


<div class="card">
    <div class="card-header">
        <div style="text-align:right">

            @{



                if (Model.Status == "Pending Approval")
                {
                    <button class="btn btn-primary action-buttons" onclick="ViewApprovalTrail('@Model.No');">
                        <i class="fa fa-route" aria-hidden="true"></i> Approval Trail
                    </button>
                    <button style="background: #162f25; color:whitesmoke; border-radius:10px" onclick="CancelDoc('@Model.No');">
                        <i class="fa fa-superpowers" aria-hidden="true"></i> Cancel Approval
                    </button>
                }

                if (Model.Status == "Open")
                {

                    <input type="button" class="btn btn-primary action-buttons" value="Send (@Model.No) For Approval" onclick="SendDocForApproval('@Model.No');" />

                }

            }
        </div>
        <div class="text-center mt-5"><h4>Petty Cash Voucher Document (@Model.No)</h4></div><br />
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.No, htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.No, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
                    @Html.ValidationMessageFor(model => model.No, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
                    @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Pay_Mode, htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Pay_Mode, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
                    @Html.ValidationMessageFor(model => model.Pay_Mode, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Cheque_No, htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Cheque_No, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
                    @Html.ValidationMessageFor(model => model.Cheque_No, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Cheque_Date, htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Cheque_Date, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
                    @Html.ValidationMessageFor(model => model.Cheque_Date, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Paying_Bank_Account, htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Paying_Bank_Account, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
                    @Html.ValidationMessageFor(model => model.Paying_Bank_Account, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Payee, htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Payee, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
                    @Html.ValidationMessageFor(model => model.Payee, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Total_Amount_LCY, htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Total_Amount_LCY, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
                    @Html.ValidationMessageFor(model => model.Total_Amount_LCY, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Currency_Code, htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Currency_Code, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
                    @Html.ValidationMessageFor(model => model.Currency_Code, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Created_By, htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Created_By, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
                    @Html.ValidationMessageFor(model => model.Created_By, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Posted, htmlAttributes: new { @class = "control-label col-md-2" })

                    <div class="checkbox">
                        @Html.EditorFor(model => model.Posted)
                        @Html.ValidationMessageFor(model => model.Posted, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Posted_By, htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Posted_By, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
                    @Html.ValidationMessageFor(model => model.Posted_By, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Posted_Date, htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Posted_Date, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
                    @Html.ValidationMessageFor(model => model.Posted_Date, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Shortcut_Dimension_1_Code, htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Shortcut_Dimension_1_Code, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
                    @Html.ValidationMessageFor(model => model.Shortcut_Dimension_1_Code, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Shortcut_Dimension_2_Code, htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Shortcut_Dimension_2_Code, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
                    @Html.ValidationMessageFor(model => model.Shortcut_Dimension_2_Code, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="mt-3" id="DivImpLines">
            <hr style="border:1px solid black" />
            <b>Petty Cash Voucher Lines</b>
            <hr />
            <div id="divPCVLines"></div>
        </div>
        @*<hr style="border:1px solid black" />
            <div>
                <b>Attachments</b>
                <div id="divAttachDocs"></div>
            </div>
            <hr style="border:1px solid black" />*@

    </div>
</div>

@*//////////////////////Modal////////////////////////////*@
<div id="myModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title mt-0" id="myModalLabel"><label id="labelF"></label></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalBody">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary waves-effect" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
@*//////////Modal///////////////*@
<div id="myModalUnits" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="myModalCheck">Petty CAsh Voucher Form</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <iframe src="" width="100%" height="600px"></iframe>
            </div>
        </div>
    </div>
</div>
@*//////////////////////Modal View Doc////////////////////////////*@
<div class="modal fade" id="myModalAttachment" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content bg-white">
            <div class="modal-header">
                <h4 class="modal-title">Attachment</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalAttachmentBody" style="width:100%;height:450px">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger waves-effect " data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script src="~/assets/js/ShowProgression.js"></script>
<script src="~/assets/js/pdfobject.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        LoadPettyCashVoucherLines(`@Model.No`, `@Model.Status`);

        $('#postingDate').datepicker({
            changeMonth: true,
            changeYear: true,
            autoclose: true,
            yearRange: '-1:+2',
            showOtherMonths: true,
            dateFormat: 'dd/mm/yy'
        });
        $("#postingDate").focus(function () {
            $("#ui-datepicker-div").position({
                my: "left top",
                at: "left bottom",
                of: $(this)
            });
        });

    });
    var LoadPettyCashVoucherLines = function (DocNo, Status) {

        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: DocNo, Status: Status}),
            url: "/PettyCash/PettyCashVouchersLines",
            success: function (data) {
                HideProgress();
                $("#divPCVLines").html(data);

            },
            error: function () {
                HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };
    var GenerateReceipt = function (DocNo) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ documentNumber: DocNo }),
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/PettyCash/GeneratePettyCashVoucherReceipt',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    var GenerateImprestSurrender = function (DocNo) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ documentNumber: DocNo }),
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/ImprestSurrender/GenerateImprestReceipt',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    var GenerateImprestSurrender = function (docNo) {
	    ShowProgress();
	    $.ajax({
		    async: true,
		    type: "POST",
		    datatype: "json",
		    data: JSON.stringify({ documentNumber: docNo }),
		    contentType: "application/json; charset=utf-8",
		    processData: false,
            url: '/ImprestSurrender/GenerateImprestSurrender',
		    success: function (data) {
			    if (data.success) {
				    $('iframe').attr('src', "data:application/pdf;base64," + data.message);
				    $("#myModalUnits").modal("show");
				    HideProgress();

			    } else {
				    Swal.fire('Error', data.message, 'error');
				    HideProgress();

			    }
		    },
		    error: function (err) {
			    HideProgress();
			    Swal.fire('Warning', err, 'warning');
		    }
	    });
    }
    var ViewApprovalTrail = function (DocNo) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ DocNo: DocNo }),
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/Common/DocumentApprovalTrail',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    var PettyCashVouchersListLink = function () {
        ShowProgress();
        window.location = "/PettyCash/PettyCashVouchersList";
    }
    var UpdatePettyCashLines = function (DocNo,LineNo) {
        var actualspent = $(`#actualSpent-${LineNo}`).val();
        var receiptNumber = $(`#receiptNo-${LineNo}`).val();
        if (receiptNumber == null || receiptNumber == "") {
            receiptNumber = "";
        }
        $("#lblTle").text("New Surrender Line");
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ documentNo: DocNo, lineNo: LineNo, actualSpent: actualspent, receiptNo: receiptNumber }),
            url: '/ImprestSurrender/UpdateSurrenderLine',
            success: function (data) {
                if (data.success == true) {
                    HideProgress();
                    Swal.fire('Success', data.message, 'success');
                    var form = $('<form>', {
                        action: '/ImprestSurrender/ViewSurrenderDocument',
                        method: 'POST'
                    }).append($('<input>', {
                        type: 'hidden',
                        name: 'DocNo',
                        value: DocNo
                    }));
                    form.appendTo('body').submit();
                }
                else {
                    HideProgress();
                    Swal.fire('Error', data.message, 'error');
                }
                HideProgress();
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
    var GetDocumentAttachments = function () {
	    var DocNo = `@Model.No`;
        var status = '@Model.Status';
	    $.ajax({
		    async: true,
		    type: "POST",
		    datatype: "json",
		    contentType: "application/json; charset = utf-8",
		    processData: false,
            data: JSON.stringify({ DocNo: DocNo, documentStatus: status }),
            url: "/Common/EdmsDocumentAttachmentList",
		    success: function (data) {
			    $("#divAttachDocs").html(data);
		    },
		    error: function () {
			    Swal.fire("There is some problem to process your request. Please try after some time");
		    }
	    });
    };
	var AddAttachment = function () {
		$("#labelF").text("File Upload");
		ShowProgress();
		$.ajax({
			async: true,
			type: "GET",
			datatype: "html",
            url: '/Common/FileUploadForm',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
    var SubmitReceipt = function (statusCheck) {
        var document = $('#docNo').val();
        var files = $('#AttachmentFile')[0].files;
        if (files.length == 0) {
            Swal.fire('Warning', 'Kindly Attach a file for the receipt!', 'warning');
            return;
        }
        else {
            SaveReceiptAttachmentFile(document);
        }
        const formData = {
            docNo: $('#docNo').val(),
            description: $('#description').val(),
            documentDate: $('#documentDate').val(),
            postingDate: $('#post').val(),
            payMode: $('#payMode').children("option:selected").val(),
            payRef: $('#payRef').val(),
            status: statusCheck
        };
        ShowProgress();
        $.ajax({
            async: true,
            url: '/ImprestSurrender/ModifyImprestReceipt',
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            data: JSON.stringify(formData),
            processData: false,
            success: function (data) {
                if (data.success == true) {
                    HideProgress();
                    LoadImprestSurrenderLines(`@Model.No`, `@Model.Status`);
                    SaveReceiptAttachmentFile(document)
                    $("#myModal").modal("hide");
                    Swal.fire('Success', data.message, 'success');
                } else {
                    HideProgress();
                    $("#myModal").modal("hide");

                    Swal.fire('Error', data.message, 'error');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    var UpdatePostingDate = function () {
            var postingDate = $('#postingDate').val();
            var docNo = '@Model.No';
            ShowProgress();
        $.ajax({
            async: true,
            url: '/ImprestSurrender/ModifyImprestSurrender',
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            data: JSON.stringify({DocNo: docNo, PostingDate: postingDate}),
            processData: false,
            success: function (data) {
                if (data.success == true) {
                    HideProgress();
                    $("#myModal").modal("hide");
                    var form = $('<form>', {
                        action: '/ImprestSurrender/ViewSurrenderDocument',
                        method: 'POST'
                    }).append($('<input>', {
                        type: 'hidden',
                        name: 'DocNo',
                        value: docNo
                    }));
                    form.appendTo('body').submit();
                    Swal.fire('Success', data.message, 'success');
                } else {
                    HideProgress();
                    $("#myModal").modal("hide");

                    Swal.fire('Error', data.message, 'error');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    	var SaveReceiptAttachmentFile = function (receiptNumber) {
        var files = document.getElementById('AttachmentFile').files;
		var filename; var base64String; var filetype;
            if (files.length) {
                var file = files[0];
                if (file.size > 50000000) {
                    Swal.fire('Warning', 'Please only files less than 50MB allowed. Thanks!!', 'warning');
                }
                else {
                    var blob = file.slice();
                    filetype = file.type;
                    filename = file.name;
                    var reader = new FileReader();
                    reader.onloadend = function (evt) {
                        if (evt.target.readyState == FileReader.DONE) {
                            var cont = evt.target.result
                            base64String = getB64Str(cont);
                            $.ajax({
                                type: "POST",
                                url: "/Common/SaveAttachedFile",
                                data: JSON.stringify({ DocNo: receiptNumber, base64Upload: base64String, fileName: filename, Extn: filetype, TableID: 57000, module: "BMA", documentType: "Imprest" }),
                                contentType: "application/json; charset=utf-8",
                                dataType: "json",
                                success: function (data) {
                                    if (data.success) {
                                        Swal.fire('Success', data.message, 'success');
                                    }
                                    else {
                                        Swal.fire('Warning', data.message, 'warning');
                                    }
                                },
                                error: function (err) {
                                    Swal.fire('Warning', err, 'warning');
                                }
                            });
                        }
                    };
                    reader.readAsArrayBuffer(blob);
                }
            }
            else
            {
                Swal.fire('Warning', 'Kindly Attach a file for the receipt!', 'warning');
            }
	};
	var SaveAttachmentFile = function (receiptNumber) {
		var  DocNo = `@Model.No`;
        var files = document.getElementById('AttachmentFile').files;
		var filename; var base64String; var filetype;
		if (files.length) {
			var file = files[0];
            if (file.size > 50000000) {
                Swal.fire('Warning', 'Please only files less than 50MB allowed. Thanks!!', 'warning');
            }
			else
            {
				var blob = file.slice();
				filetype = file.type;
				filename = file.name;
				var reader = new FileReader();
				reader.onloadend = function (evt) {
					if (evt.target.readyState == FileReader.DONE) {
						var cont = evt.target.result
						base64String = getB64Str(cont);
						ShowProgress();
						$.ajax({
							type: "POST",
							url: "/Common/SaveAttachedFile",
                            data: JSON.stringify({ DocNo: DocNo, base64Upload: base64String, fileName: filename, Extn: filetype, TableID: 57000, module: "BMA", documentType:"Imprest"}),
							contentType: "application/json; charset=utf-8",
							dataType: "json",
							success: function (data) {
								if (data.success) {
									HideProgress();
									$("#myModal").modal("hide");
									Swal.fire('Success', data.message, 'success');
                                    GetDocumentAttachments();
								}
								else {
									Swal.fire('Warning', data.message, 'warning');
									HideProgress();
								}
							},
							error: function (err) {
								HideProgress();
								Swal.fire('Warning', err, 'warning');
							}
						});
					}
				};
				reader.readAsArrayBuffer(blob);
			}
		}
	};
	function getB64Str(buffer) {
		var binary = '';
		var bytes = new Uint8Array(buffer);
		var len = bytes.byteLength;
		for (var i = 0; i < len; i++) {
			binary += String.fromCharCode(bytes[i]);
		}
		return window.btoa(binary);
	}
    var ViewAttachment = function (moduleCheck, docNo, docId) {
        $.ajaxSetup({ cache: false });
        ShowProgress();
        var viewer = $("#modalAttachmentBody");
        viewer.empty();

        $.ajax({
            url: '/Common/GetEdmsDocuments',
            type: "GET",
            datatype: "json",
            cache: false,
            contentType: "application/json; charset=utf-8",
            data: {
                module: moduleCheck,
                documentNo: docNo,
                documentType: "Expenditure Requisition",
                documentId: docId
            },
            success: function (data) {
                if (data.success) {
                    if (data.base64) {
                        var mimeType = data.mimeType || 'application/pdf';

                        if (mimeType.startsWith('application/pdf')) {

                            var byteCharacters = atob(data.base64);
                            var byteNumbers = new Array(byteCharacters.length);
                            for (var i = 0; i < byteCharacters.length; i++) {
                                byteNumbers[i] = byteCharacters.charCodeAt(i);
                            }
                            var byteArray = new Uint8Array(byteNumbers);
                            var blob = new Blob([byteArray], { type: mimeType });
                            var blobUrl = URL.createObjectURL(blob);


                            viewer.html('<iframe src="' + blobUrl + '" style="width:100%; height:500px;" frameborder="0"></iframe>');
                        } else if (mimeType.startsWith('image/')) {

                            viewer.html('<img src="data:' + mimeType + ';base64,' + data.base64 + '" style="width:100%;"/>');
                        } else {

                            var blob = b64toBlob(data.base64, mimeType);
                            var url = window.URL.createObjectURL(blob);
                            window.open(url, '_blank');
                        }
                        $("#myModalAttachment").modal("show");
                    } else {

                        window.location = '/Common/AttachmentDownload?fileName=' + data.message;
                        Swal.fire('Success', 'Document Downloaded successfully', 'success');
                    }
                } else {
                    Swal.fire('Warning', data.message, 'warning');
                }
                HideProgress();
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Error', err.responseText || 'An error occurred', 'error');
            }
        });
    };
    var SendDocForApproval = function () {
        var DocNo = `@Model.No`;
        var rowCount1 = $('#DocumentAttachmnts').length;
        if (rowCount1 == 0) {
            Swal.fire('Warning', 'Document should have an attachment before sending for approval', 'warning');
            return;
        }
        $.ajaxSetup({ cache: false });
        Swal.fire({
            title: 'Are you sure?',
            text: "You want to send this document for approval!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, Send it!'
        }).then((result) => {
            if (result.value) {
                ShowProgress();
                $.ajax({
                    async: true,
                    type: "POST",
                    datatype: "json",
                    data: JSON.stringify({ DocNo: DocNo }),
                    contentType: "application/json; charset = utf-8",
                    processData: false,
                    url: '/PettyCash/SendPettyCashVoucherForApproval',
                    success: function (data) {
                        if (data.success == true) {
                            HideProgress();
                            var form = $('<form>', {
                                action: '/PettyCash/PettyCashVouchersDocumentView',
                                method: 'POST'
                            }).append($('<input>', {
                                type: 'hidden',
                                name: 'DocNo',
                                value: DocNo
                            }));
                            form.appendTo('body').submit();
                        }
                        else {
                            HideProgress();
                            Swal.fire('Error', data.message, 'error');
                        }
                    },
                    error: function (err) {
                        HideProgress();
                        Swal.fire('Warning', err, 'warning');
                    }
                });
            }
            else {
                Swal.fire('Cancelled', 'Imprest surrender not sent for approval', 'error');
            }
        });
    }
    var DeleteAttachment = function (docId, line) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            dataType: "json",
            data: JSON.stringify({
                documentId: docId,
                lineNo: line
            }),
            contentType: "application/json; charset=utf-8",
            processData: false,
            url: '/Common/RemoveFileAsync',
            success: function (data) {
                HideProgress();
                if (data.success === true) {
                    Swal.fire('Success', data.message, 'success');
                    GetDocumentAttachments();
                } else {
                    Swal.fire('Error', data.message, 'error');
                    GetDocumentAttachments();
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err.responseText, 'warning');
            }
        });
    };
    var CancelDoc = function (documentNo) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ DocNo: documentNo }),
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/ImprestSurrender/CancelImprestSurrenderForApproval',
            success: function (data) {
                if (data.success == true) {
                    HideProgress();
                    Swal.fire('Success', data.message, 'success');
                    var form = $('<form>', {
                        action: '/ImprestSurrender/ViewSurrenderDocument',
                        method: 'POST'
                    }).append($('<input>', {
                        type: 'hidden',
                        name: 'DocNo',
                        value: documentNo
                    }));
                    form.appendTo('body').submit();
                }
                else {
                    HideProgress();
                    Swal.fire('Error', data.message, 'error');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
    var ViewDocComments = function (documentNumber) {
        $("#labelF").text("Document Comments");
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ docNo: documentNumber }),
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/Common/DocumentApprovalComments',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    var PostDocument = function (documentNo) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ DocNo: documentNo }),
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/ImprestSurrender/PostImprestSurrender',
            success: function (data) {
                if (data.success == true) {
                    HideProgress();
                    Swal.fire('Success', data.message, 'success');
                    window.location = "/ImprestSurrender/ImprestSurrender";
                }
                else {
                    HideProgress();
                    Swal.fire('Error', data.message, 'error');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
</script>

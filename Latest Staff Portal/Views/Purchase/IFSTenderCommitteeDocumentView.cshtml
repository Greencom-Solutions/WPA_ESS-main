﻿@model Latest_Staff_Portal.ViewModel.IFSTenderCommitteeCard


@{
    ViewBag.Title = "IFSTenderCommitteeDocumentView";
    Layout = "~/Views/Shared/Sitemaster.cshtml";
}
<style>
    thead {
        background-color: black;
        color: white;
    }

    hr {
        margin: 4px;
    }

    .BtnPadding {
        padding: 1px;
        font-size: 12px;
    }
</style>
<div class="page-header">
    <div class="row">
        <div class="col-sm-12">
            <ul class="breadcrumb">
                <li class="breadcrumb-item"><a href="#" onclick="IFSTenderCommitteeLink();">Procurement Committee</a></li>
                <li class="breadcrumb-item active">Procurement Committee (@Model.Document_No)</li>
            </ul>
        </div>
    </div>
</div>
<hr />
<br />


<div class="card">
    <div class="card-header">
        <h4>Procurement Committee</h4>

        <div style="text-align:right">

            @{

                if (Model.Approval_Status == "Open")
                {
                        <button style="background: #162f25; color:whitesmoke; border-radius:10px" onclick="SendDocForApproval('@Model.Document_No');">
                            <i class="fa fa-x" aria-hidden="true"></i> Send (@Model.Document_No) For Approval
                        </button>
                  
                }

                if (Model.Approval_Status == "Pending Approval")
                {
                    <button style="background: #162f25; color:whitesmoke; border-radius:10px" onclick="CancelDocApprovalRequest('@Model.Document_No');">
                        <i class="fa fa-x" aria-hidden="true"></i> Cancel (@Model.Document_No) Approval Request
                    </button>

                }

                if (Model.Approval_Status == "Released")
                {
                    <button style="background: #162f25; color:whitesmoke; border-radius:10px" onclick="NotifyCommitteeMembers('@Model.Document_No');">
                        <i class="fa fa-check" aria-hidden="true"></i> Appoint and Notify Appointees
                    </button>
                }
            }
            <button style="background: #162f25; color:whitesmoke; border-radius:10px" onclick="ViewApprovalTrail('@Model.Document_No');">
                <i class="fa fa-list" aria-hidden="true"></i> Approval Trail
            </button>
        </div>

    </div>


    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Document No ", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Document_No, new { @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd", @id = "Document_No" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Committee Type", htmlAttributes: new { @class = "control-label col-md-12" })
                    @* @Html.TextBoxFor(m => m.Committee_Type, new { @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd" })*@
                    @Html.DropDownListFor(m => m.Committee_Type, Model.ListOfCommitteeTypes, "Select Option", new { @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd", @id = "Committee_Type", @onchange = "HandleDescription(this.value)" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("IFS Code", htmlAttributes: new { @class = "control-label col-md-12" })
                    @*@Html.TextBoxFor(m => m.IFS_Code, new { @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd" })*@
                    @Html.DropDownListFor(m => m.IFS_Code, Model.ListOfIFSCodes, "Select Option", new { @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd", @id = "IFS_Code", @onchange = "HandleDescription(this.value)" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Description", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Description, new { @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd", @id = "Description" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Document Date", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Document_Date, new { @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Appointment Effective Date", htmlAttributes: new { @class = "control-label col-md-12" })
                    <input type="datetime" required class="form-control" value="@DateTime.Parse(Model.Appointment_Effective_Date).ToString("dd/MM/yyyy")" placeholder="dd/mm/yyyy" id="Appointment_Effective_Date" onkeydown="return false;" autocomplete="off" onkeyup="DateChanged(this)" readonly style="background-color:#dedebd" />
                    @*@Html.TextBoxFor(m => m.Appointment_Effective_Date, new { @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd", @id = "Appointment_Effective_Date" })*@
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Appointing Authority ", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Appointing_Authority, new { @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd", @id = "Appointing_Authority" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Tender Name", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Tender_Name, new { @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd", @id = "Tender_Name" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Duration", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Duration, new { @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd", @id = "Duration" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Raised By", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Raised_By, new { @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd", })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Name", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Name, new { @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd" })
                </div>
            </div>
            @* <div class="col-md-6">
                    <div class="form-group">
                        @Html.Label("Designation", htmlAttributes: new { @class = "control-label col-md-12" })
                        @Html.TextBoxFor(m => m.Designation, new { @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd" })
                    </div>
                </div>*@

            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Geographical Location ", htmlAttributes: new { @class = "control-label col-md-12" })
                    @*@Html.TextBoxFor(m => m.Global_Dimension_1_Code, new { @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd" })*@
                    @Html.DropDownListFor(m => m.Global_Dimension_1_Code, Model.ListOfDim1, "Select Option", new { @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Admin Unit", htmlAttributes: new { @class = "control-label col-md-12" })
                    @*  @Html.TextBoxFor(m => m.Global_Dimension_2_Code, new { @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd" })*@
                    @Html.DropDownListFor(m => m.Global_Dimension_2_Code, Model.ListOfDim2, "Select Option", new { @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Min Required No Of Members ", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Min_Required_No_of_Members, new { @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Actual No of Committee Members ", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Actual_No_of_Committee_Memb, new { @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd" })
                </div>
            </div>


            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Approval Status", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Approval_Status, new { @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Created Date ", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Created_Date, new { @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Created Time ", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Created_Time, new { @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd" })
                </div>
            </div>
        </div>

        <hr />

        @{
            if (Model.Approval_Status == "Open")
            {
                <div align="center" id="enableFieldsBtn">
                    <input type="button" class="btn btn-primary waves-effect waves-light" value="Update Header" id="enableFields" />
                </div>
            }
        }


        <div align="center" id="updateHeaderBtn" hidden>
            <div class="d-flex flex-row gap-2"></div>
            <input type="button" class="btn btn-primary waves-effect waves-light" value="Submit" id="updateHeader" />
            <input type="button" class="btn btn-danger " value="Cancel" id="cancelUpdateHeader" />
        </div>

        <div>

            <div>


                <hr style="border:1px solid black" />
                <b>Committee Lines</b>
                <hr />
                <div id="divIFSTenderCommitteeLines"></div>
                <hr style="border:1px solid black" />
            </div>
        </div>

        @{
            @* if (Model.Status == "Open")
                {
                    <div align="center">
                        <input type="button" class="btn btn-primary waves-effect waves-light" value="Send (@Model.Code) For Approval" onclick="SendDocForApproval('@Model.Code');" />
                    </div>
                }*@
        }
    </div>
</div>

    @*//////////////////////Modal////////////////////////////*@
    <div class="modal" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content bg-white">
                <div class="modal-header">
                    <h4 class="modal-title"><label id="labelF"></label></h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="modalBody">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger waves-effect " data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
    @*//////////////////////Modal View Doc////////////////////////////*@
    <div class="modal fade" id="myModalAttachment" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content bg-white">
                <div class="modal-header">
                    <h4 class="modal-title">Attachment</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="modalAttachmentBody" style="width:100%;height:450px">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger waves-effect " data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
    @*//////////////////////Document Rejection Modal////////////////////////////*@
    <div class="modal fade" id="myModalComments" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content bg-white">
                <div class="modal-header">
                    <h4 class="modal-title">Rejection Comments</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="modalCommentBody">
                    <div id="divDocComments"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger waves-effect " data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>


    <script src="~/assets/js/ShowProgression.js"></script>
    <script src="~/assets/js/pdfobject.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            LoadIFSTenderCommitteeLines(`@Model.Document_No`);
           @* var status = `@Model.Status`;*@
            //HideHeaderEditInput(status);

            var Successmsg = '@Request.RequestContext.HttpContext.Session["SuccessMsg"]';
            if (Successmsg != "") {
                Swal.fire('Success', Successmsg, 'success', true);
                $.ajax({
                    type: "POST",
                    url: "/Common/NullibySessions"
                });
            }

            $('#Appointment_Effective_Date').html("dd/mm/yyyy");
            $('#Appointment_Effective_Date').datepicker({
                changeMonth: true,
                changeYear: true,
                autoclose: true,
                yearRange: '-0:+2',
                showOtherMonths: true,
                dateFormat: 'dd/mm/yy',
                minDate: 0
            });
            $(window).resize(function () {
                $('#Appointment_Effective_Date').datepicker('hide');
                $('#Appointment_Effective_Date').blur();
            });

        });
        var LoadIFSTenderCommitteeLines = function (DocNo) {
            var status = '@Model.Approval_Status';
            ShowProgress();
            $.ajax({
                async: true,
                type: "POST",
                datatype: "html",
                contentType: "application/json; charset = utf-8",
                processData: false,
                data: JSON.stringify({ DocNo: DocNo, status: status }),
                url: "/Purchase/IFSTenderCommitteeLines",
                success: function (data) {
                    $("#divIFSTenderCommitteeLines").html(data);
                    HideProgress();
                    //GetDocumentAttachments();
                },
                error: function () {
                    HideProgress();
                    Swal.fire("There is some problem to process your request. Please try after some time");
                }
            });
        };


        var HandleDescription = function (selectedValue) {
            var committeeType = document.getElementById("Committee_Type").value;
            var dropdown = document.getElementById("IFS_Code");
            var description = document.getElementById("Description");
            var Tender_Name = document.getElementById("Tender_Name");

            var selectedText = dropdown.options[dropdown.selectedIndex].text;
            /* alert(committeeType);*/

            let parts = selectedText.split("-");
            var IFS_Code= parts[0];
            var Name = parts[1];


            switch (committeeType) {
                case "OPENING":
                    description.value = IFS_Code + "_Tender Opening Committee"

                    break;
                case "EVALUATION":
                    description.value = IFS_Code + "_Tender Evaluation Committee"
                    break;
                case "NEGOTIATE":
                    description.value = IFS_Code + "_Tender Negotiation Committee"
                    break;
                case "INSPECTION":
                    description.value = IFS_Code + "_Tender Inspection Committee"
                    break;
                case "DISPOSAL":
                    description.value = IFS_Code + "_Tender Disposal Committee"
                    break;
                case "POOL":
                    description.value = IFS_Code + "_Tender Pool Committee"
                    break;

                default:
                    Name = IFS_Code + "_Tender Committee"
            }

            Tender_Name.value = Name;

        }

        document.getElementById("enableFields").addEventListener("click", function () {
            let inputs = document.querySelectorAll(".form-control");
            document.getElementById('enableFieldsBtn').setAttribute("hidden", "");
            document.getElementById('updateHeaderBtn').removeAttribute("hidden")
            Global_Dimension_2_Code
            inputs.forEach(function (input) {
                // Skip fields for "Document_No" and "Approval_Status"
                if (input.name !== "Document_No" && input.name !== "Approval_Status" && input.name !== "Document_Date" && input.name !== "Raised_By" && input.name !== "Name" && input.name !== "Designation" && input.name !== "Global_Dimension_1_Code" && input.name !== "Global_Dimension_2_Code" && input.name !== "Global_Dimension_2_Code" && input.name !== "Min_Required_No_of_Members" && input.name !== "Actual_No_of_Committee_Memb" && input.name !== "Created_Date" && input.name !== "Created_Time" && input.name !== "Description" && input.name !== "Tender_Name") {
                    input.removeAttribute("readonly");
                    input.style.backgroundColor = "#ffffff";
                }
            });

        });

        document.getElementById("cancelUpdateHeader").addEventListener("click", function () {

            document.getElementById('updateHeaderBtn').setAttribute("hidden", "");
            document.getElementById('enableFieldsBtn').removeAttribute("hidden");

            let inputs2 = document.querySelectorAll(".form-control");

            inputs2.forEach(function (input2) {
                input2.setAttribute("readonly", true);
                input2.style.backgroundColor = "#dedebd";
            });

        });

        document.getElementById("updateHeader").addEventListener("click", function () {
            var Document_No = $("#Document_No").val();
            var Committee_Type = $("#Committee_Type").val();
            var IFS_Code = $("#IFS_Code").val();
            var Description = $("#Description").val();
            var Appointment_Effective_Date = $("#Appointment_Effective_Date").val();
            var Appointing_Authority = $("#Appointing_Authority").val();
            var Tender_Name = $("#Tender_Name").val();
            var Duration = $("#Duration").val();

            var isValid = true;

            if (!Document_No) {
                Swal.fire('Warning', 'Document No is required.', 'warning');
                isValid = false;
            }
            if (!Committee_Type) {
                Swal.fire('Warning', 'Committee Type is required.', 'warning');
                isValid = false;
            }
            if (!IFS_Code) {
                Swal.fire('Warning', 'IFS Code is required.', 'warning');
                isValid = false;
            }
            if (!Appointment_Effective_Date) {
                Swal.fire('Warning', 'Appointment Effective Date is required.', 'warning');
                isValid = false;
            }

            if (!Appointment_Effective_Date) {
                Swal.fire('Warning', 'Appointment Effective Date is required.', 'warning');
                isValid = false;
            }
            if (!Tender_Name) {
                Swal.fire('Warning', 'Tender Name is required.', 'warning');
                isValid = false;
            }


            if (!Appointing_Authority) {
                Swal.fire('Warning', 'Appointing Authority is required.', 'warning');
                isValid = false;
            }

            if (!Duration) {
                Swal.fire('Warning', 'Duration is required.', 'warning');
                isValid = false;
            }

            if (!isValid) {
                return;
            }


            ShowProgress();

            $.ajax({
                async: true,
                type: "POST",
                dataType: "html",
                url: '/Purchase/updateIFSTenderCommitteeHeader',
                data: {
                    Document_No: Document_No,
                    Committee_Type: Committee_Type,
                    IFS_Code: IFS_Code,
                    Description: Description,
                    Appointment_Effective_Date: Appointment_Effective_Date,
                    Appointing_Authority: Appointing_Authority,
                    Tender_Name: Tender_Name,
                    Duration: Duration
                },
                success: function (data) {
                    HideProgress();

                    Swal.fire('Success', "Record successfully submitted", 'success');
                    window.location = "/Purchase/IFSTenderCommitteeDocumentView?DocNo=" + Document_No;

                },
                error: function (err) {
                    HideProgress();
                    Swal.fire('Warning', err.responseText, 'warning');
                }
            });

        });


        function RemoveItem(DocNo, LnNo) {
            var committeeType = `@Model.Committee_Type`;
            ShowProgress();
            $.ajax({
                async: true,
                type: "POST",
                dataType: "json",
                data: JSON.stringify({ DocNo: DocNo, LnNo: LnNo, committeeType: committeeType }),
                contentType: "application/json; charset=utf-8",
                processData: false,
                url: '/Purchase/DeleteTenderCommitteeMember',
                success: function (data) {
                    HideProgress();
                    if (data.success === true) {
                        Swal.fire('Success', "Record Successfully Deleted", 'success');
                        window.location.reload()
                    } else {
                        Swal.fire('Error', data.message, 'error');
                    }
                },
                error: function (err) {
                    HideProgress();
                    Swal.fire('Warning', err.responseText, 'warning');
                }
            });
        };

        var AddTenderCommitteeLine = function () {
            var docNo = '@Model.Document_No';
            var comType = '@Model.Committee_Type';


            $("#labelF").text("New Tender Committee Line");
            ShowProgress();

            $.ajax({
                async: true,
                type: "GET",
                dataType: "html",
                url: '/Purchase/NewIFSTenderCommitteeLine',
                data: {
                    docNo: docNo,
                   commiteeType:comType
                },
                success: function (data) {
                    $("#modalBody").html(data);
                    HideProgress();
                    $("#myModal").modal("show");
                },
                error: function (err) {
                    HideProgress();
                    Swal.fire('Warning', err.responseText, 'warning');
                }
            });
        };
	    function submitMember() {
		    var isValid = true;

		    var documentNo = $("#documentNo").val();
		    if (!documentNo) {
			    Swal.fire('Warning', 'Document No is required.', 'warning');
			    isValid = false;
		    }

		    var committeeType = $("#committeeType").val();
		    if (!committeeType) {
			    Swal.fire('Warning', 'Committee Type is required.', 'warning');
			    isValid = false;
		    }

		    var memberNo = $("#Member_No").val();
		    if (!memberNo) {
			    Swal.fire('Warning', 'Member No is required.', 'warning');
			    isValid = false;
		    }

		    var role = $("#role").val();
		    if (!role) {
			    Swal.fire('Warning', 'Role is required.', 'warning');
			    isValid = false;
		    }

		    if (!isValid) {
			    return;
		    }

		    var newMember = {
			    Document_No: documentNo,
			    Committee_Type: committeeType,
			    Member_No: memberNo,
			    MRole: role
		    };

		    ShowProgress();

		    $.ajax({
			    type: "POST",
			    url: "/Purchase/SubmitCommiteeMember",
			    data: JSON.stringify(newMember),
			    contentType: "application/json; charset=utf-8",
			    dataType: "json",
			    success: function (data) {
				    HideProgress();
				    if (data.success) {
                        window.location.reload();
				    } else {
					    Swal.fire('Error', data.message, 'error');
				    }
			    },
			    error: function (err) {
				    HideProgress();
				    Swal.fire('Error', err.responseText, 'error');
			    }
		    });
	    }
        var IFSTenderCommitteeLink = function () {
            ShowProgress();
            window.location = "/Purchase/IFSTenderCommittee";
	    }

	    var SendDocForApproval = function (DocNo) {

		    ShowProgress();
		    $.ajax({
			    async: true,
			    type: "POST",
			    dataType: "json",
			    data: JSON.stringify({ DocNo: DocNo }),
			    contentType: "application/json; charset=utf-8",
			    processData: false,
			    url: '/Purchase/SendIFSApproval',
			    success: function (data) {
				    HideProgress();
				    if (data.success === true) {
					    Swal.fire('Success', data.message, 'success');
                        window.location.reload();
				    } else {
					    Swal.fire('Error', data.message, 'error');
				    }
			    },
			    error: function (err) {
				    HideProgress();
				    Swal.fire('Warning', err.responseText, 'warning');
			    }
		    });
	    };


        function CancelDocApprovalRequest (DocNo) {
		    ShowProgress();
		    $.ajax({
			    async: true,
			    type: "POST",
			    dataType: "json",
			    data: JSON.stringify({ DocNo: DocNo }),
			    contentType: "application/json; charset=utf-8",
			    processData: false,
			    url: '/Purchase/CancelIFSApproval',
			    success: function (data) {
				    HideProgress();
				    if (data.success === true) {
					    window.location.reload()
				    } else {
					    Swal.fire('Error', data.message, 'error');
				    }
			    },
			    error: function (err) {
				    HideProgress();
				    Swal.fire('Warning', err.responseText, 'warning');
			    }
		    });
	    };

        function NotifyCommitteeMembers(DocNo) {
		    ShowProgress();

		    $.ajax({
			    async: true,
			    type: "POST",
			    dataType: "json",
			    data: JSON.stringify({
				    docNo: DocNo
			    }),
			    contentType: "application/json; charset=utf-8",
			    processData: false,
			    url: '/Purchase/NotifyCommitteeMembers',
			    success: function (data) {
				    HideProgress();
				    if (data.success === true) {
					    Swal.fire('Success', 'Committee members have been notified successfully.', 'success');
				    } else {
					    Swal.fire('Error', data.message, 'error');
				    }
			    },
			    error: function (err) {
				    HideProgress();
				    Swal.fire('Warning', 'An error occurred while notifying committee members: ' + err.responseText, 'warning');
			    }
		    });
        };


        function ViewApprovalTrail (DocNo) {
            ShowProgress();
            $.ajax({
                async: true,
                type: "POST",
                datatype: "json",
                data: JSON.stringify({ DocNo: DocNo, RecID: "Functional Procurement Plan: " + DocNo }),
                contentType: "application/json; charset = utf-8",
                processData: false,
                url: '/Common/DocumentApprovalTrail',
                success: function (data) {
                    $("#modalBody").html(data);
                    HideProgress();
                    /* $("#myModalLinks").modal("hide");*/
                    $("#myModal").modal("show");
                },
                error: function (err) {
                    HideProgress();
                    Swal.fire('Warning', err, 'warning');
                }
            });
        }

    </script>

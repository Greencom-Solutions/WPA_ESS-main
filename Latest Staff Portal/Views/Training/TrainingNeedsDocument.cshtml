@model Latest_Staff_Portal.ViewModel.TrainingNeedRequests

@{
    ViewBag.Title = "TrainingNeedsDocument";
    Layout = "~/Views/Shared/Sitemaster.cshtml";
}
<style>
    thead {
        background-color: black;
        color: white;
    }

    hr {
        margin: 4px;
    }

    .BtnPadding {
        padding: 1px;
        font-size: 12px;
    }
</style>

<div class="page-header">
    <div class="row">
        <div class="col-sm-12">
            <ul class="breadcrumb">
                <li class="breadcrumb-item">
                    <a href="#" onclick="TrainingRequisitionLink();">Training Needs List</a>
                </li>
                <li class="breadcrumb-item active">Training Needs Document Details(@Model.Code)</li>
            </ul>
        </div>
    </div>
</div>
<div class="card">
    <div style="text-align:right" id="HideEditButton">
        <input type="button" class="btn btn-danger BtnPadding" id="btnEdit" value="Edit Header" onclick="EditDocument();"/>
        <hr/>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <b>Document No</b>
                @Html.TextBoxFor(m => m.Code, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Date Created</b>
                @Html.TextBoxFor(m => m.CreatedOn, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <b>Employee Name</b>
                @Html.TextBoxFor(m => m.EmployeeName, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Status</b>
                @Html.TextBoxFor(m => m.Status, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>

        </div>
        <div class="row">
            <div class="col-md-6">
                <b>Training Needs Description</b>
                @Html.TextBoxFor(m => m.CourseDescription, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Purpose</b>
                @Html.TextAreaFor(m => m.Comments, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd", id = "txtPurpose" })
            </div>
        </div>
        <hr/>
        @*<hr style="border:1px solid black"/>
        <b>List of Needs</b>
        <hr/>
        <div id="divParticipantLines"></div>
        <hr/>*@
        <hr style="border:1px solid black"/>
        <b>Training History</b>
        <hr/>
        <div id="divTrainingHistory"></div>
        <hr/>
        <hr style="border:1px solid black"/>
        <b>Current Assessment Skills</b>
        <hr/>
        <div id="divAssessmentSkills"></div>
        <hr/>
        <hr style="border:1px solid black"/>
        <b>TNA Questions</b>
        <hr/>
        <div id="divTNAQuestions"></div>
        <hr style="border:1px solid black"/>
        <div align="center" id="DivSendForApprovals">
            <input type="button" class="btn btn-primary BtnPadding" value="Submit" onclick="SendDocForApproval();"/>
        </div>
        <hr/>
    </div>
</div>
@*//////////////////////Modal////////////////////////////*@
<div id="myModal" class="modal fade" tabindex="-1" role="dialog" ke aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title mt-0" id="myModalLabel">
                    <label id="labelF"></label>
                </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalBody">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary waves-effect" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
@*//////////////////////Modal////////////////////////////*@
<div class="modal" id="tnaModel" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content bg-white">
            <div class="modal-header">
                <h4 class="modal-title">New Training Need</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="tnamodalBody">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger waves-effect " data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<script src="~/assets/js/ShowProgression.js"></script>
<script src="~/assets/js/pdfobject.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        LoadTrainingDocumentLines(`@Model.Code`, `@Model.Status`);
        LoadTrainingHistory(`@Model.Code`, `@Model.Status`);
        LoadTrainingAssessmentSkills(`@Model.Code`, `@Model.Status`);
        LoadTNAQuestions(`@Model.Code`, `@Model.Status`);
        var status = `@Model.Status`;
        HideHeaderEditInput(status);

        var Successmsg = '@Request.RequestContext.HttpContext.Session["SuccessMsg"]';
        if (Successmsg != "") {
            Swal.fire('Success', Successmsg, 'success', true);
            $.ajax({
                type: "POST",
                url: "/Common/NullibySessions"
            });
        }
        //document.getElementById("ddlDim2").disabled = true;
        //document.getElementById("ddlDim1").disabled = true;
        //document.getElementById("ddlDim3").disabled = true;
    });
    var AnswerTNA = function (DocNo) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/Training/AnswerTNA?DocNo=' + DocNo,
            success: function (data) {
                $("#tnamodalBody").html(data);
                HideProgress();
                $("#tnaModel").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    var LoadTrainingDocumentLines = function (DocNo, Status) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: DocNo, Status: Status }),
            url: "/Training/TrainingNeedsLines",
            success: function (data) {
                $("#divParticipantLines").html(data);
                HideProgress();
                GetDocumentAttachments();
            },
            error: function () {
                HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };
    var LoadTrainingHistory = function (DocNo, Status) {
       // ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: DocNo, Status: Status }),
            url: "/Training/TrainingHistoryList",
            success: function (data) {
                $("#divTrainingHistory").html(data);
               // HideProgress();
               /// GetDocumentAttachments();
            },
            error: function () {
                //HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };

    var LoadTrainingAssessmentSkills = function (DocNo, Status) {
        //ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: DocNo, Status: Status }),
            url: "/Training/TrainingAssessmentSkillsList",
            success: function (data) {
                $("#divAssessmentSkills").html(data);
               // HideProgress();
               // GetDocumentAttachments();
            },
            error: function () {
              //  HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };
    var LoadTNAQuestions = function (DocNo, Status) {
        // ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset=utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: DocNo, Status: Status }),
            url: "/Training/TNAQuestionsList",
            success: function (data) {
                $("#divTNAQuestions").html(data);
                // HideProgress();
                // GetDocumentAttachments();

                // Check if all answers are filled
                var allAnswered = true;
                $("#divTNAQuestions").find("input[type='text']").each(function () {
                    if ($(this).val().trim() === "") {
                        allAnswered = false;
                        return false; // break the loop
                    }
                });

                if (!allAnswered) {
                    AnswerTNA(DocNo);
                    Swal.fire("Error", "Please answer all the TNA questions.", "error");
                }
            },
            error: function () {
                // HideProgress();
                Swal.fire("Error", "There is some problem to process your request. Please try after some time.");
            }
        });
    };

    var SubmitTNAAnswers = function () {
        var allAnswered = true;
        var unansweredQuestions = [];

        // Loop through each textarea to check if it is empty
        $("textarea[id^='answer_']").each(function () {
            var answer = $(this).val().trim();
            var questionId = $(this).attr('id').split('_')[1]; // Extract the Question_ID from the ID

            if (answer === "") {
                allAnswered = false;
                unansweredQuestions.push(questionId);
            }
        });

        if (!allAnswered) {
            var unansweredQuestionIds = unansweredQuestions.join(', ');
            Swal.fire("Error", "Please answer all the questions. Unanswered Question IDs: " + unansweredQuestionIds, "error");
        } else {
            // Proceed with form submission or further processing
            var answers = [];
            $("textarea[id^='answer_']").each(function () {
                var answer = $(this).val().trim();
                var questionId = $(this).attr('id').split('_')[1]; // Extract the Question_ID from the ID

                answers.push({ Question_ID: questionId, Answer: answer });
            });

            // Make an AJAX call to submit the answers
            ShowProgress();
            $.ajax({
                type: "POST",
                url: "/Training/SubmitTNAAnswers", // Update with your actual endpoint
                data: JSON.stringify(answers),
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    HideProgress();
                    if (data.success) {
                        Swal.fire("Success", "Answers submitted successfully!", "success");
                        // Optionally, redirect or perform other actions
                    } else {
                        Swal.fire("Error", data.message, "error");
                    }
                },
                error: function (xhr, status, error) {
                    HideProgress();
                    Swal.fire("Error", "An error occurred while submitting your answers. Please try again.", "error");
                }
            });
        }
    };

    var GetDocumentAttachments = function () {
        ShowProgress();
        var DocNo = `@Model.Code`;
        var Status = `@Model.Status`;
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: DocNo, TableID: 38, Status: Status}),
            url: "/Common/DocumentAttachments",
            success: function (data) {
                HideProgress();
                $("#divAttachDocs").html(data);
            },
            error: function () {
                HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };
    var TrainingRequisitionLink = function () {
        ShowProgress();
        window.location = "/Training/TrainingNeedsList";
    }
    var EditDocument = function () {
         var status = `@Model.Status`;
        if ($("#btnEdit").val() == "Edit Header") {
            $("#btnEdit").val("Clear Header Edit");
            $("#ddlDim2,#ddlDim1,#ddlDim3").select2({
                width: '100%'
            });
            ShowHeaderEditInput();
        }
        else {
            HideHeaderEditInput(status);
            $("#btnEdit").val("Edit Header");
        }
    }
    var HideHeaderEditInput = function (Status) {
        if (Status == "New") {
            $("#HideEditButton").show();
            $("#HideLineButton").show();
            $("#DivSendForApproval").show();
        }
        else {
            $("#HideEditButton").hide();
            $("#HideLineButton").hide();
            $("#DivSendForApproval").hide();
        }
        $("#DivUpdateButton").hide();
        $("#dtPicker,#txtPurpose,#ddlDim2,#ddlDim1,#ddlDim3").css("background-color", "#dedebd");
        $("#txtPurpose,#dtPicker,#txtPurpose,#ddlDim2,#ddlDim1,#ddlDim3").attr("readonly", true);

    }
    var ShowHeaderEditInput = function () {
        $("#DivUpdateButton").show();
        $("#dtPicker,#txtPurpose,#ddlDim2,#ddlDim1,#ddlDim3").css("background-color", "white");
        $("#txtPurpose,#dtPicker,#txtPurpose,#ddlDim2,#ddlDim1,#ddlDim3").attr("readonly", false);
    }
    var UpdatePurchaseHeader = function () {
        var DocNo = `@Model.Code`;
        var Department = $("#ddlDim2").children("option:selected").val();
        var Division = $("#ddlDim1").children("option:selected").val();
        var Section = $("#ddlDim3").children("option:selected").val();
        var Remarks = $("#txtPurpose").val().replace(/(\r\n|\n|\r)/gm, " ");
       // var RespoC = $("#ddlRespC").children("option:selected").val();

        if (Department == "") {
            Swal.fire('Warning', "Select Project", 'warning');
            return;
        }
        else if (Division == "") {
            Swal.fire('Warning', "Select Division", 'warning');
            return;
        }
        else if (Remarks == "") {
            Swal.fire('Warning', "Enter purpose for the purchase", 'warning');
            return;
        }
        else if (Remarks.length > 50) {
            Swal.fire('Warning', "Your Reason should have a maximum of 50 characters", 'warning');
            return;
        }
        else {
            var PRVHeader = {};
            PRVHeader.Department = Department;
            PRVHeader.Division = Division;
            PRVHeader.Section = Section;
            PRVHeader.Remarks = Remarks;

            ShowProgress();
            //Send the JSON array to Controller using AJAX.
            $.ajax({
                type: "POST",
                url: "/Purchase/UpdatePurchaseHeader",
                data: JSON.stringify({ DocNo: DocNo, prvHeader: PRVHeader }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    if (data.success) {
                        HideProgress();
                        HideHeaderEditInput("Open");
                        $("#bApplication_NonEdit").val("Edit Header");
                        $("#txtPurpose").val(Remarks);
                        //$("#txtCampus").val(CampusName);
                        //$("#txtDepartment").val(DepartmentName);
                        //$("#txtRespC").val(RespoC);
                        Swal.fire('Success', data.message, 'success');
                    }
                    else {
                        Swal.fire('Warning', data.message, 'warning');
                        HideProgress();
                    }
                },
                error: function (err) {
                    HideProgress();
                    Swal.fire('Warning', err, 'warning');
                }
            });
        };
    }
    var AddAttachment = function () {
        $("#lblTitl").text("File Upload");
        ShowProgress();
        $.ajax({
            async: true,
            type: "GET",
            datatype: "html",
            url: '/Purchase/FileUploadForm',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
    var SaveAttachmentFile = function () {
        var DocNo = `@Model.Code`;
        var filename; var base64String; var filetype;
        var files = document.getElementById('PurchasefileAttachment').files;
        if (files.length) {
            var file = files[0];
            if (file.size > 10000000) {
                Swal.fire('Warning', 'Please only files less than 10MB allowed. Thanks!!', 'warning');
            }
            else {
                var blob = file.slice();
                filetype = file.type;
                filename = file.name;
                var reader = new FileReader();
                reader.onloadend = function (evt) {
                    if (evt.target.readyStatePurpose== FileReader.DONE) { // DONE == 2
                        var cont = evt.target.result
                        base64String = getB64Str(cont);
                        ShowProgress();
                        //Send the JSON array to Controller using AJAX.
                        $.ajax({
                            type: "POST",
                            url: "/Common/SaveAttachedFile",
                            data: JSON.stringify({ DocNo: DocNo, base64Upload: base64String, fileName: filename, Extn: filetype, TableID: 38 }),
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (data) {
                                if (data.success) {
                                    HideProgress();
                                    GetDocumentAttachments();
                                    $("#myModal").modal("hide");
                                    Swal.fire('Success', data.message, 'success');
                                }
                                else {
                                    Swal.fire('Warning', data.message, 'warning');
                                    HideProgress();
                                }
                            },
                            error: function (err) {
                                HideProgress();
                                Swal.fire('Warning', err, 'warning');
                            }
                        });
                    }
                };
                reader.readAsArrayBuffer(blob);
            }
        }
    };
    function getB64Str(buffer) {
        var binary = '';
        var bytes = new Uint8Array(buffer);
        var len = bytes.byteLength;
        for (var i = 0; i < len; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return window.btoa(binary);
    }
    var ViewAttachment = function (tbl, No, Id, fName, ext) {
        $.ajaxSetup({ cache: false });
        ShowProgress();
        $.ajax({
            cache: false,
            url: '/Common/DocumentAttachmentview',
            type: "POST",
            datatype: "json",
            cache: false,
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ tblID: tbl, No: No, ID: Id, fileName: fName, ext: ext }),
            success: function (data) {
                if (data.success == true) {
                    if (data.view == true) {
                        var viewer = $("#modalAttachmentBody");
                        if (ext == "pdf") {
                            PDFObject.embed("data:application/" + ext + ";base64," + data.message + "", viewer);
                        }
                        if (ext == "png" || ext == "jpg") {
                            PDFObject.embed("data:image/" + ext + ";base64," + data.message + "", viewer);
                        }
                        $("#myModalAttachment").modal("show");
                        HideProgress();
                    }
                    else {
                        window.location = '/Common/AttachmentDownload?fileName=' + data.message;
                        Swal.fire('Success', 'Document Downloaded successfully', 'success');
                        HideProgress();
                    }
                }
                else {
                    HideProgress();
                    Swal.fire('Warning', data.message, 'warning');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
    var DeleteAttachment = function (tbl, No, Id) {
        $.ajaxSetup({ cache: false });
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.value) {
                ShowProgress();
                $.ajax({
                    cache: false,
                    url: '/Common/DeleteAttachedDocument',
                    datatype: "json",
                    type: "POST",
                    data: JSON.stringify({ DocNo: No, tblID: tbl, DocID: Id }),
                    contentType: "application/json; charset = utf-8",
                    success: function (data) {
                        if (data.success == true) {
                            HideProgress();
                            GetDocumentAttachments();
                            Swal.fire('Success', 'File Deleted Successfully', 'success');
                        }
                        else {
                            HideProgress();
                            Swal.fire('Warning', data.message, 'warning');
                        }
                    },
                    error: function (err) {
                        HideProgress();
                        Swal.fire('Warning', err, 'warning');
                    }
                });
            }
            else {
                Swal.fire('Cancelled', 'Attachment File has not been deleted', 'error');
            }
        });
    };
    var AddParticipantLines = function () {
        $("#labelF").text("Needs Requests");
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/Training/NewNeedForm',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
    var SubmitTrainNeedLine = function () {
        var DocNo = `@Model.Code`;
        var Course = $("#ddlCourseID").children("option:selected").val();
        var Source = $("#DdlSource").children("option:selected").val();
        var Comments = $("#txtComments").val();

        ShowProgress();
        $.ajax({
            type: "POST",
            url: "/Training/SubmitNeedForm",
            data: JSON.stringify({ DocNo: DocNo, Course: Course, Source: Source, Comment: Comments }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                if (data.success) {
                    HideProgress();
                    LoadTrainingDocumentLines(DocNo, 'Open');
                    LoadTrainingHistory(DocNo, 'Open');
                    LoadTrainingAssessmentSkills(DocNo, 'Open');
                    LoadTNAQuestions(DocNo, 'Open');
                    $("#myModal").modal("hide");
                    Swal.fire('Success', data.message, 'success');
                }
                else {
                    Swal.fire('Warning', data.message, 'warning');
                    HideProgress();
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    var RemoveItem = function (Emp) {
    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        type: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
        if (result.value) {
            var DocNo = `@Model.Code`;
            ShowProgress();
            $.ajax({
                type: "POST",
                url: "/Training/RemoveNeedLine",
                data: JSON.stringify({ DocNo: DocNo, Emp: Emp }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    if (data.success) {
                        HideProgress();
                        LoadTrainingDocumentLines(DocNo, 'Open');
                        LoadTrainingHistory(DocNo, 'Open');
                        LoadTrainingAssessmentSkills(DocNo, 'Open');
                        LoadTNAQuestions(DocNo, 'Open');
                        $("#myModal").modal("hide");
                        Swal.fire('Success', data.message, 'success');
                    }
                    else {
                        Swal.fire('Warning', data.message, 'warning');
                        HideProgress();
                    }
                },
                error: function (err) {
                    HideProgress();
                    Swal.fire('Warning', err, 'warning');
                }
            });
        }
        else {
            Swal.fire('Cancelled', 'Training need has not been deleted', 'error');
        }
    });
    };
    var SendDocForApproval = function () {
        
            var DocNo = `@Model.Code`;
            ShowProgress();
            $.ajax({
                async: true,
                type: "POST",
                datatype: "json",
                data: JSON.stringify({ DocNo: DocNo }),
                contentType: "application/json; charset = utf-8",
                processData: false,
                url: '/Training/SubmitTrainingNeedsApproval',
                success: function (data) {
                    if (data.success == true) {
                        HideProgress();
                        HideHeaderEditInput();
                        LoadTrainingDocumentLines('@Model.Code', 'Pending Approval');
                        LoadTrainingHistory('@Model.Code', 'Pending Approval');
                        LoadTrainingAssessmentSkills('@Model.Code', 'Pending Approval');
                        LoadTNAQuestions('@Model.Code', 'Pending Approval');
                        $("#txtStatus").val("Pending Approval");
                        $("#HideEditButton").hide();
                        $("#HideLineButton").hide();
                        $("#DivSendForApprovals").hide();
                        Swal.fire('Success', data.message, 'success');
                    }
                    else {
                        HideProgress();
                        Swal.fire('Error', data.message, 'error');
                    }
                },
                error: function (err) {
                    HideProgress();
                    Swal.fire('Warning', err, 'warning');
                }
            });
        
    }
    var AddAssessmentSkills = function () {
        $("#labelF").text("Current Assessment & Skills");
    ShowProgress();
    $.ajax({
        async: true,
        type: "POST",
        datatype: "json",
        contentType: "application/json; charset = utf-8",
        processData: false,
        url: '/Training/AddAssessmentSkills',
        success: function (data) {
            $("#modalBody").html(data);
            HideProgress();
            $("#myModal").modal("show");
        },
        error: function (err) {
            HideProgress();
            Swal.fire('Warning', err, 'warning');
        }
    });
};
    var SubmitAssessmentSkills = function () {
    var DocNo = `@Model.Code`;
        var TrainingMode = $("#ddlTrainingMode").children("option:selected").val();
        var Institution = $("#ddlInstitution").children("option:selected").val();
        var Source = $("#DdlSource").children("option:selected").val();
        var MajorTasks = $("#txtMajorTasks").val();
        var TrainingNeeds = $("#txtTrainingNeeds").val();
        var StartDate = $("#txtStartDate").val();
        var checkbox = document.getElementById("txtTrainingRequired");
        var TrainingRequired = checkbox.checked;

    ShowProgress();
    $.ajax({
        type: "POST",
        url: "/Training/SubmitAssessmentSkills",
        data: JSON.stringify({ DocNo: DocNo, TrainingMode: TrainingMode, Source: Source, Institution: Institution, MajorTasks: MajorTasks, TrainingNeeds: TrainingNeeds, StartDate: StartDate, TrainingRequired: TrainingRequired }),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            if (data.success) {
                HideProgress();
                LoadTrainingDocumentLines(DocNo, 'Open');
                LoadTrainingHistory(DocNo, 'Open');
                LoadTrainingAssessmentSkills(DocNo, 'Open');
                LoadTNAQuestions(DocNo, 'Open');
                $("#myModal").modal("hide");
                Swal.fire('Success', data.message, 'success');
            }
            else {
                Swal.fire('Warning', data.message, 'warning');
                HideProgress();
            }
        },
        error: function (err) {
            HideProgress();
            Swal.fire('Warning', err, 'warning');
        }
    });
}
    var RemoveAssessmentSkills = function (Emp) {
Swal.fire({
    title: 'Are you sure?',
    text: "You won't be able to revert this!",
    type: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Yes, delete it!'
}).then((result) => {
    if (result.value) {
        var DocNo = `@Model.Code`;
        ShowProgress();
        $.ajax({
            type: "POST",
            url: "/Training/RemoveNeedLine",
            data: JSON.stringify({ DocNo: DocNo, Emp: Emp }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                if (data.success) {
                    HideProgress();
                    LoadTrainingDocumentLines(DocNo, 'Open');
                    LoadTrainingHistory(DocNo, 'Open');
                    LoadTrainingAssessmentSkills(DocNo, 'Open');
                    LoadTNAQuestions(DocNo, 'Open');
                    $("#myModal").modal("hide");
                    Swal.fire('Success', data.message, 'success');
                }
                else {
                    Swal.fire('Warning', data.message, 'warning');
                    HideProgress();
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    else {
        Swal.fire('Cancelled', 'Training need has not been deleted', 'error');
    }
});
};

</script>